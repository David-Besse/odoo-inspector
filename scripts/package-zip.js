/**
 * Script d'empaquetage de l'extension Odoo Inspector en format ZIP
 * G√©n√®re un fichier ZIP pr√™t √† √™tre install√© dans Chrome/Brave ou soumis au Chrome Web Store
 * 
 * Note: Ce script utilise la biblioth√®que 'archiver'
 * npm install --save-dev archiver
 */

const fs = require('fs');
const path = require('path');
// Remplacer l'import de ChromeExtensionBuilder par une m√©thode compatible
// const ChromeExtensionBuilder = require('chrome-extension-builder');
const { version } = require('../package.json');

// Configuration
const DIST_DIR = path.join(__dirname, '../dist');
const OUTPUT_DIR = path.join(__dirname, '../packages');
const PRIVATE_KEY_FILE = path.join(__dirname, '../private-key.pem');
const OUTPUT_FILE = path.join(OUTPUT_DIR, `odoo-inspector-v${version}.crx`);

// Assurer que le r√©pertoire de sortie existe
if (!fs.existsSync(OUTPUT_DIR)) {
  fs.mkdirSync(OUTPUT_DIR, { recursive: true });
  console.log(`R√©pertoire ${OUTPUT_DIR} cr√©√© avec succ√®s`);
}

// V√©rifier que le r√©pertoire dist existe
if (!fs.existsSync(DIST_DIR)) {
  console.error(`‚ùå Erreur : Le r√©pertoire ${DIST_DIR} n'existe pas.`);
  console.error('Veuillez ex√©cuter "npm run build" avant de lancer ce script');
  process.exit(1);
}

// Fonction pour g√©n√©rer une cl√© priv√©e si elle n'existe pas
function ensurePrivateKey() {
  if (!fs.existsSync(PRIVATE_KEY_FILE)) {
    console.log(`‚öôÔ∏è G√©n√©ration d'une nouvelle cl√© priv√©e...`);
    const { execSync } = require('child_process');
    
    try {
      // Utiliser OpenSSL pour g√©n√©rer une cl√© RSA
      execSync(`openssl genrsa 2048 > "${PRIVATE_KEY_FILE}"`);
      console.log(`‚úÖ Nouvelle cl√© priv√©e g√©n√©r√©e: ${PRIVATE_KEY_FILE}`);
      console.log(`‚ö†Ô∏è IMPORTANT: Conservez ce fichier en s√©curit√©. Il est n√©cessaire pour mettre √† jour l'extension.`);
    } catch (error) {
      console.error(`‚ùå Erreur lors de la g√©n√©ration de la cl√© priv√©e:`, error.message);
      process.exit(1);
    }
  }
}

// M√©thode alternative pour cr√©er un fichier ZIP en utilisant archiver
function buildZipWithArchiver() {
  console.log(`üîÑ Empaquetage de l'extension...`);
  
  // Utiliser archiver pour cr√©er un fichier ZIP
  const archiver = require('archiver');
  const zipFile = path.join(OUTPUT_DIR, `odoo-inspector-v${version}.zip`);
  const output = fs.createWriteStream(zipFile);
  const archive = archiver('zip', {
    zlib: { level: 9 } // Niveau de compression maximal
  });
  
  // Gestion des √©v√©nements
  output.on('close', () => {
    const sizeInMB = (archive.pointer() / 1024 / 1024).toFixed(2);
    console.log(`‚úÖ Extension empaquet√©e avec succ√®s !`);
    console.log(`üì¶ ${zipFile}`);
    console.log(`üìä Taille : ${sizeInMB} MB`);
    console.log(`\nüí° Pour installer l'extension :`);
    console.log(`   M√©thode 1 (recommand√©e): Glisser-d√©poser directement le fichier ZIP sur chrome://extensions/`);
    console.log(`   M√©thode 2 (alternative):`);
    console.log(`   1. D√©compressez le fichier ZIP g√©n√©r√©`);
    console.log(`   2. Ouvrez chrome://extensions/ et activez le "Mode d√©veloppeur"`);
    console.log(`   3. Cliquez sur "Charger l'extension non empaquet√©e" et s√©lectionnez le dossier d√©compress√©`);
  });
  
  archive.on('warning', (err) => {
    if (err.code === 'ENOENT') {
      console.warn(`‚ö†Ô∏è Avertissement : ${err}`);
    } else {
      throw err;
    }
  });
  
  archive.on('error', (err) => {
    throw err;
  });
  
  // Connexion du flux de sortie
  archive.pipe(output);
  
  // Ajouter tous les fichiers du r√©pertoire dist
  archive.directory(DIST_DIR, false);
  
  // Finaliser l'archive
  archive.finalize();
}

// Tenter de construire avec chrome-extension-builder
async function buildExtension() {
  try {
    console.log(`üîÑ Cr√©ation du fichier ZIP en cours...`);
    
    // Le module ChromeExtensionBuilder n'est pas fonctionnel, passer directement √† la m√©thode alternative
    console.log(`Utilisation de la m√©thode d'empaquetage avec archiver...`);
    buildZipWithArchiver();
    
  } catch (error) {
    console.error(`‚ùå Erreur lors de la cr√©ation du fichier ZIP:`, error.message);
    console.log(`\nüîÑ Tentative avec la m√©thode alternative (archiver)...`);
    buildZipWithArchiver();
  }
}

// Ex√©cuter le script
buildExtension(); 